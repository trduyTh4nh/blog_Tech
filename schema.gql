# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TImageDTO {
  id: String
  imageUrl: String
  description: String
  createdAt: DateTime
  post: TPostDTO
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type TPostDTO {
  id: String
  title: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
  user: TUserDTO
  images: [TImageDTO!]
}

type TUserDTO {
  id: String
  userName: String
  email: String
  password: String
  bio: String
  profilePicture: String
  posts: [TPostDTO!]
  createdAt: DateTime
}

type BaseResponse {
  success: Boolean
  code: String
  message: String
}

type PaginationInfo {
  totalItems: Int!
  totalPages: Int!
  itemsPerPage: Int!
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type TUserDTOPaginatedResponse {
  items: [TUserDTO!]!
  pageInfo: PaginationInfo!
}

type TPostDTOPaginatedResponse {
  items: [TPostDTO!]!
  pageInfo: PaginationInfo!
}

type TImageDTOPaginatedResponse {
  items: [TImageDTO!]!
  pageInfo: PaginationInfo!
}

type TPostSectionTypeDTO {
  id: String
  name: String
  postSections: [TPostSectionDTO!]
}

type TPostSectionListDTO {
  id: String
  sectionId: String
  item: String
  image: String
  sections: TPostSectionDTO
}

type TPostSectionCodeDTO {
  id: String
  sectionId: String
  code: String
  language: String
  image: String
  section: TPostSectionDTO
}

type TPostSectionParagraphDTO {
  id: String
  sectionId: String
  content: String
  image: String
  section: TPostSectionDTO
}

type TPostSectionDTO {
  id: String
  postId: String
  order: Float
  header: String
  content: String
  imageUrl: String
  type: String
  post: TPostDTO
  sectionType: TPostSectionTypeDTO
  listItems: [TPostSectionListDTO!]
  codeItems: [TPostSectionCodeDTO!]
  paragraphItems: [TPostSectionParagraphDTO!]
}

type TPostSectionDTOPaginatedResponse {
  items: [TPostSectionDTO!]!
  pageInfo: PaginationInfo!
}

type TPostSectionTypeDTOPaginatedResponse {
  items: [TPostSectionTypeDTO!]!
  pageInfo: PaginationInfo!
}

type TPostSectionListDTOPaginatedResponse {
  items: [TPostSectionListDTO!]!
  pageInfo: PaginationInfo!
}

type TPostSectionCodeDTOPaginatedResponse {
  items: [TPostSectionCodeDTO!]!
  pageInfo: PaginationInfo!
}

type TPostSectionParagraphDTOPaginatedResponse {
  items: [TPostSectionParagraphDTO!]!
  pageInfo: PaginationInfo!
}

type Query {
  getPostSectionCode(where: TPostSectionCodeWhereInput, skip: Float = 0, take: Float = 100, orderBy: [TPostSectionCodeOrderByInput!], groupBy: [PostSectionCodeGroupByFieldsEnum!]): TPostSectionCodeDTOPaginatedResponse!
  getPostSectionParagraph(where: TPostSectionParagraphWhereInput, skip: Float = 0, take: Float = 100, orderBy: [TPostSectionParagraphOrderByInput!], groupBy: [PostSectionParagraphGroupByFieldsEnum!]): TPostSectionParagraphDTOPaginatedResponse!
  getUser(where: TUserWhereInput, skip: Float = 0, take: Float = 100, orderBy: [TUserOrderByInput!], groupBy: [UserGroupByFieldsEnum!]): TUserDTOPaginatedResponse!
  getPost(where: TPostWhereInput, skip: Float = 0, take: Float = 100, orderBy: [TPostOrderByInput!], groupBy: [PostGroupByFieldsEnum!]): TPostDTOPaginatedResponse!
  getImage(where: TImageWhereInput, skip: Float = 0, take: Float = 100, orderBy: [TImageOrderByInput!], groupBy: [ImageGroupByFieldsEnum!]): TImageDTOPaginatedResponse!
  getPostSection(where: TPostSectionWhereInput, skip: Float = 0, take: Float = 100, orderBy: [TPostSectionOrderByInput!], groupBy: [PostSectionGroupByFieldsEnum!]): TPostSectionDTOPaginatedResponse!
  getPostSectionType(where: TPostSectionTypeWhereInput, skip: Float = 0, take: Float = 100, orderBy: [TPostSectionTypeOrderByInput!], groupBy: [PostSectionTypeGroupByFieldsEnum!]): TPostSectionTypeDTOPaginatedResponse!
  getPostSectionList(where: TPostSectionListWhereInput, skip: Float = 0, take: Float = 100, orderBy: [TPostSectionListOrderByInput!], groupBy: [PostSectionListGroupByFieldsEnum!]): TPostSectionListDTOPaginatedResponse!
}

input TPostSectionCodeWhereInput {
  AND: [TPostSectionCodeWhereInput!]
  OR: [TPostSectionCodeWhereInput!]
  NOT: [TPostSectionCodeWhereInput!]
  id: StringFilter
  sectionId: StringFilter
  code: StringFilter
  language: StringFilter
  image: StringFilter
  section: TPostSectionWhereInput
}

input StringFilter {
  equals: String
  isNull: Boolean
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

input TPostSectionWhereInput {
  AND: [TPostSectionWhereInput!]
  OR: [TPostSectionWhereInput!]
  NOT: [TPostSectionWhereInput!]
  id: StringFilter
  postId: StringFilter
  order: NumberFilter
  header: StringFilter
  content: StringFilter
  imageUrl: StringFilter
  type: StringFilter
  sectionTypeId: StringFilter
  post: TPostWhereInput
  sectionType: TPostSectionTypeWhereInput
  listItems: TPostSectionListWhereInput
  codeItems: TPostSectionCodeWhereInput
  paragraphItems: TPostSectionParagraphWhereInput
}

input NumberFilter {
  equals: Float
  not: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
}

input TPostWhereInput {
  AND: [TPostWhereInput!]
  OR: [TPostWhereInput!]
  NOT: [TPostWhereInput!]
  id: StringFilter
  userId: StringFilter
  title: StringFilter
  content: StringFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  user: TUserWhereInput
  images: TImageWhereInput
  sections: TPostSectionWhereInput
}

input DateFilter {
  equals: DateTime
  not: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
}

input TUserWhereInput {
  AND: [TUserWhereInput!]
  OR: [TUserWhereInput!]
  NOT: [TUserWhereInput!]
  id: StringFilter
  userName: StringFilter
  email: StringFilter
  password: StringFilter
  bio: StringFilter
  profilePicture: StringFilter
  createdAt: DateFilter
  role: StringFilter
  posts: TPostWhereInput
}

input TImageWhereInput {
  AND: [TImageWhereInput!]
  OR: [TImageWhereInput!]
  NOT: [TImageWhereInput!]
  id: StringFilter
  imageUrl: StringFilter
  description: StringFilter
  createdAt: DateFilter
  postId: StringFilter
  post: TPostWhereInput
}

input TPostSectionTypeWhereInput {
  AND: [TPostSectionTypeWhereInput!]
  OR: [TPostSectionTypeWhereInput!]
  NOT: [TPostSectionTypeWhereInput!]
  id: StringFilter
  name: StringFilter
  sections: TPostSectionWhereInput
}

input TPostSectionListWhereInput {
  AND: [TPostSectionListWhereInput!]
  OR: [TPostSectionListWhereInput!]
  NOT: [TPostSectionListWhereInput!]
  id: StringFilter
  sectionId: StringFilter
  item: StringFilter
  image: StringFilter
  section: TPostSectionWhereInput
}

input TPostSectionParagraphWhereInput {
  AND: [TPostSectionParagraphWhereInput!]
  OR: [TPostSectionParagraphWhereInput!]
  NOT: [TPostSectionParagraphWhereInput!]
  id: StringFilter
  sectionId: StringFilter
  content: StringFilter
  image: StringFilter
  section: TPostSectionWhereInput
}

input TPostSectionCodeOrderByInput {
  id: SortEnumType
  sectionId: SortEnumType
  code: SortEnumType
  language: SortEnumType
  image: SortEnumType
  section: [TPostSectionOrderByInput!]
}

enum SortEnumType {
  ASC
  DESC
}

input TPostSectionOrderByInput {
  id: SortEnumType
  postId: SortEnumType
  order: SortEnumType
  header: SortEnumType
  content: SortEnumType
  imageUrl: SortEnumType
  type: SortEnumType
  sectionTypeId: SortEnumType
  post: [TPostOrderByInput!]
  sectionType: [TPostSectionTypeOrderByInput!]
  listItems: [TPostSectionListOrderByInput!]
  codeItems: [TPostSectionCodeOrderByInput!]
  paragraphItems: [TPostSectionParagraphOrderByInput!]
}

input TPostOrderByInput {
  id: SortEnumType
  userId: SortEnumType
  title: SortEnumType
  content: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  user: [TUserOrderByInput!]
  images: [TImageOrderByInput!]
  sections: [TPostSectionOrderByInput!]
}

input TUserOrderByInput {
  id: SortEnumType
  userName: SortEnumType
  email: SortEnumType
  password: SortEnumType
  bio: SortEnumType
  profilePicture: SortEnumType
  createdAt: SortEnumType
  role: SortEnumType
  posts: [TPostOrderByInput!]
}

input TImageOrderByInput {
  id: SortEnumType
  imageUrl: SortEnumType
  description: SortEnumType
  createdAt: SortEnumType
  postId: SortEnumType
  post: [TPostOrderByInput!]
}

input TPostSectionTypeOrderByInput {
  id: SortEnumType
  name: SortEnumType
  sections: [TPostSectionOrderByInput!]
}

input TPostSectionListOrderByInput {
  id: SortEnumType
  sectionId: SortEnumType
  item: SortEnumType
  image: SortEnumType
  section: [TPostSectionOrderByInput!]
}

input TPostSectionParagraphOrderByInput {
  id: SortEnumType
  sectionId: SortEnumType
  content: SortEnumType
  image: SortEnumType
  section: [TPostSectionOrderByInput!]
}

"""Fields available for grouping for PostSectionCodeGroupByFieldsEnum"""
enum PostSectionCodeGroupByFieldsEnum {
  id
  sectionId
  code
  language
  image
}

"""
Fields available for grouping for PostSectionParagraphGroupByFieldsEnum
"""
enum PostSectionParagraphGroupByFieldsEnum {
  id
  sectionId
  content
  image
}

"""Fields available for grouping for UserGroupByFieldsEnum"""
enum UserGroupByFieldsEnum {
  id
  userName
  email
  password
  bio
  profilePicture
  createdAt
  role
}

"""Fields available for grouping for PostGroupByFieldsEnum"""
enum PostGroupByFieldsEnum {
  id
  userId
  title
  content
  createdAt
  updatedAt
}

"""Fields available for grouping for ImageGroupByFieldsEnum"""
enum ImageGroupByFieldsEnum {
  id
  imageUrl
  description
  createdAt
  postId
}

"""Fields available for grouping for PostSectionGroupByFieldsEnum"""
enum PostSectionGroupByFieldsEnum {
  id
  postId
  order
  header
  content
  imageUrl
  type
  sectionTypeId
}

"""Fields available for grouping for PostSectionTypeGroupByFieldsEnum"""
enum PostSectionTypeGroupByFieldsEnum {
  id
  name
}

"""Fields available for grouping for PostSectionListGroupByFieldsEnum"""
enum PostSectionListGroupByFieldsEnum {
  id
  sectionId
  item
  image
}

type Mutation {
  createPostSectionCode(input: TPostSectionCodeInput!): TPostSectionCodeDTO!
  createManyPostSectionCode(input: [TPostSectionCodeInput!]!): [TPostSectionCodeDTO!]!
  updatePostSectionCode(input: TPostSectionCodeInput!): TPostSectionCodeDTO!
  updateManyPostSectionCode(input: [TPostSectionCodeInput!]!): [TPostSectionCodeDTO!]!
  deletePostSectionCode(id: String!): BaseResponse!
  createPostSectionParagraph(input: TPostSectionParagraphInput!): TPostSectionParagraphDTO!
  createManyPostSectionParagraph(input: [TPostSectionParagraphInput!]!): [TPostSectionParagraphDTO!]!
  updatePostSectionParagraph(input: TPostSectionParagraphInput!): TPostSectionParagraphDTO!
  updateManyPostSectionParagraph(input: [TPostSectionParagraphInput!]!): [TPostSectionParagraphDTO!]!
  deletePostSectionParagraph(id: String!): BaseResponse!
  createUser(input: TUserInput!): TUserDTO!
  createManyUser(input: [TUserInput!]!): [TUserDTO!]!
  updateUser(input: TUserInput!): TUserDTO!
  updateManyUser(input: [TUserInput!]!): [TUserDTO!]!
  deleteUser(id: String!): BaseResponse!
  createPost(input: TPostInput!): TPostDTO!
  createManyPost(input: [TPostInput!]!): [TPostDTO!]!
  updatePost(input: TPostInput!): TPostDTO!
  updateManyPost(input: [TPostInput!]!): [TPostDTO!]!
  deletePost(id: String!): BaseResponse!
  createPostF(input: TPostInputF!): TPostDTO!
  createImage(input: TImageInput!): TImageDTO!
  createManyImage(input: [TImageInput!]!): [TImageDTO!]!
  updateImage(input: TImageInput!): TImageDTO!
  updateManyImage(input: [TImageInput!]!): [TImageDTO!]!
  deleteImage(id: String!): BaseResponse!
  createPostSection(input: TPostSectionInput!): TPostSectionDTO!
  createManyPostSection(input: [TPostSectionInput!]!): [TPostSectionDTO!]!
  updatePostSection(input: TPostSectionInput!): TPostSectionDTO!
  updateManyPostSection(input: [TPostSectionInput!]!): [TPostSectionDTO!]!
  deletePostSection(id: String!): BaseResponse!
  createPostSectionType(input: TPostSectionTypeInput!): TPostSectionTypeDTO!
  createManyPostSectionType(input: [TPostSectionTypeInput!]!): [TPostSectionTypeDTO!]!
  updatePostSectionType(input: TPostSectionTypeInput!): TPostSectionTypeDTO!
  updateManyPostSectionType(input: [TPostSectionTypeInput!]!): [TPostSectionTypeDTO!]!
  deletePostSectionType(id: String!): BaseResponse!
  createPostSectionList(input: TPostSectionListInput!): TPostSectionListDTO!
  createManyPostSectionList(input: [TPostSectionListInput!]!): [TPostSectionListDTO!]!
  updatePostSectionList(input: TPostSectionListInput!): TPostSectionListDTO!
  updateManyPostSectionList(input: [TPostSectionListInput!]!): [TPostSectionListDTO!]!
  deletePostSectionList(id: String!): BaseResponse!
}

input TPostSectionCodeInput {
  id: String
  sectionId: String
  code: String
  language: String
  image: String
}

input TPostSectionParagraphInput {
  id: String
  sectionId: String
  content: String
  image: String
}

input TUserInput {
  id: String
  userName: String
  email: String
  password: String
  bio: String
  profilePicture: String
  createdAt: DateTime
  role: String
}

input TPostInput {
  id: String
  userId: String
  title: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
}

input TPostInputF {
  title: String!
  content: String!
  userId: String!
  imageIds: [String!]
}

input TImageInput {
  id: String
  imageUrl: String
  description: String
  createdAt: DateTime
  postId: String
}

input TPostSectionInput {
  id: String
  postId: String
  order: Float
  header: String
  content: String
  imageUrl: String
  type: String
  sectionTypeId: String
}

input TPostSectionTypeInput {
  id: String
  name: String
}

input TPostSectionListInput {
  id: String
  sectionId: String
  item: String
  image: String
}